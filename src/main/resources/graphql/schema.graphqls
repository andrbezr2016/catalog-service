type BookDto {
    id: ID
    title: String
    description: String
    author: String
    publisher: String
    yearPublished: Int
    isbn: String
    pages: Int
    tags: [TagDto]
}

input BookInput {
    title: String!
    description: String
    author: String
    publisher: String
    yearPublished: Int
    isbn: String
    pages: Int
    tags: [TagInput]
}

input BookUpdate {
    title: String
    description: String
    author: String
    publisher: String
    yearPublished: Int
    isbn: String
    pages: Int
    tags: [TagUpdate]
}

input BookFilter {
    id: ID
    title: String
    description: String
    author: String
    publisher: String
    yearPublished: Int
    isbn: String
    pages: Int
    tags: [TagFilter]
}

type TagDto {
    id: ID
    name: String
}

input TagInput {
    name: String!
}

input TagUpdate {
    name: String
}

input TagFilter {
    name: String
}

type Query {
    getBooks(bookFilter: BookFilter!): [BookDto]
    getTags(tagFilter: TagFilter!): [TagDto]
}

type Mutation {
    addBook(bookInput: BookInput!): BookDto
    updateBook(id: ID!, bookUpdate: BookUpdate!): BookDto
    deleteBook(id: ID!): BookDto
    addTag(tagInput: TagInput!): TagDto
    updateTag(id: ID!, tagUpdate: TagUpdate!): TagDto
}